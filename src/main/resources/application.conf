akka {
  loglevel = "DEBUG"

  # Log the complete configuration at INFO level when the actor system is started.
  # This is useful when you are uncertain of what configuration is used.
  log-config-on-start = off

//  actor {
//    debug {
//      # enable function of LoggingReceive, which is to log any received message at
//      # DEBUG level
//      receive = on
//
//      # enable DEBUG logging of all AutoReceiveMessages (Kill, PoisonPill etc.)
//      autoreceive = on
//
//      # enable DEBUG logging of actor lifecycle changes
//      lifecycle = on
//
//      # enable DEBUG logging of unhandled messages
//      unhandled = on
//
//      # enable DEBUG logging of all LoggingFSMs for events, transitions and timers
//      fsm = on
//
//      # enable DEBUG logging of subscription changes on the eventStream
//      event-stream = on
//    }
//  }

  # Properties for akka.kafka.ProducerSettings can be
  # defined in this section or a configuration section with
  # the same layout.
  kafka.producer {
    # Tuning parameter of how many sends that can run in parallel.
    parallelism = 100

    # Duration to wait for `KafkaProducer.close` to finish.
    close-timeout = 60s

    # Fully qualified config path which holds the dispatcher configuration
    # to be used by the producer stages. Some blocking may occur.
    # When this value is empty, the dispatcher configured for the stream
    # will be used.
    use-dispatcher = "akka.kafka.default-dispatcher"

    # The time interval to commit a transaction when using the `Transactional.sink` or `Transactional.flow`
    # for exactly-once-semantics processing.
    eos-commit-interval = 100ms

    # Properties defined by org.apache.kafka.clients.producer.ProducerConfig
    # can be defined in this configuration section.
    kafka-clients {
    }
  }

  quartz {
    threadPool.threadCount = 10
    threadPool.threadPriority = 9
    threadPool.daemonThreads = false
    quartz {
      schedules {
        Every30Seconds {
          description = "A cron job that fires off every 30 seconds"
          expression = "*/30 * * ? * *"
        }
      }
    }
  }
}

